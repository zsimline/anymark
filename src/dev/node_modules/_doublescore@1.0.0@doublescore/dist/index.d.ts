declare function DoubleScore(...args: any[]): {
    iterate: {
        (iterator: (item: any, index?: any[]) => void): any;
        flatten(): any;
    };
    clone: () => any;
    getType: () => "number" | "undefined" | "object" | "function" | "infinity" | "integer" | "null" | "array" | "date" | "regex" | "not-a-number" | "float";
    isArray: () => boolean;
    isNumber: () => boolean;
    isObject: () => boolean;
    mixin: (...myArgs: any[]) => any;
};
declare namespace DoubleScore {
    var clone: (arg: string | number | boolean | object | any[] | Date) => any;
    var getType: (arg: any) => "number" | "undefined" | "object" | "function" | "infinity" | "integer" | "null" | "array" | "date" | "regex" | "not-a-number" | "float";
    var isArray: (arg: any) => boolean;
    var isNumber: (arg: any) => boolean;
    var isObject: (arg: any) => boolean;
    var iterate: typeof import("./lib/iterate").default;
    var mixin: typeof import("./lib/mixin").default;
    var timer: typeof import("./lib/timer").default;
}
/**
 * We use this export syntax in combination with esModuleInterop: true.
 *
 * This allows for maintaining our interface that pre-dates the TypeScript for JS based consumers of this library.
 * Using export = results in compiled JS that looks like this:
 *
 * module.exports = DoubleScore;
 *
 * Whereas, this:
 *
 * export default DoubleScore;
 *
 * Results in this:
 *
 * exports.default = DoubleScore;
 *
 */
export = DoubleScore;
